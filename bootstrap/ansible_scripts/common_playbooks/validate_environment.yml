# these tasks validate the local jumpbox environment before working on the bootstrap node
# nothing actually runs on the bootstrap node (hosts: bootstraps is set so that
# the cluster_name variable is picked up from the cluster group_vars correctly)
---
- hosts: bootstraps
  gather_facts: no
  vars_prompt:
    - name: "validate_cluster_name"
      prompt: "Please verify the name of the cluster you intend to work on"
      private: no
  tasks:
  - name: Cluster name cross-check
    fail: msg="Entered value {{ validate_cluster_name }} does not match group_vars cluster name {{ cluster_name }}"
    when: validate_cluster_name != cluster_name

  - name: Get root of repository
    local_action: command git rev-parse --show-toplevel
    register: repo_root
    become: no
    run_once: true

  - name: Set facts for file path locations
    set_fact:
      default_bootstrap_config: "{{ repo_root.stdout }}/bootstrap/config/bootstrap_config.sh.defaults"
      override_bootstrap_config: "{{ repo_root.stdout }}/bootstrap/config/bootstrap_config.sh.overrides"
      shared_prereqs_script: "{{ repo_root.stdout }}/bootstrap/shared/shared_prereqs.sh"
    delegate_to: 127.0.0.1

  - name: Download files to local file cache
    local_action: shell source {{ default_bootstrap_config }} && if [ -f {{ override_bootstrap_config }} ]; then source {{ override_bootstrap_config }}; fi && {{ shared_prereqs_script }}
    become: no
    run_once: true
    when: update_bcpc_local_cache
    environment:
      REPO_ROOT: "{{ repo_root.stdout }}"

  - name: check for presence of SSH key
    local_action: stat path={{ ansible_ssh_private_key_file }}
    register: ssh_stat
    become: no
    run_once: true

  - fail: msg="Key {{ ansible_ssh_private_key_file }} not present"
    when: not ssh_stat.stat.exists

  - fail: msg="Key {{ ansible_ssh_private_key_file }} incorrectly permissioned"
    when: ssh_stat.stat.mode != "0600"

  - name: check for presence of local Git staging directory
    local_action: stat path={{ controlnode_git_staging_dir }}
    register: git_staging_dir_stat
    become: no
    run_once: true

    # unfortunately if something does not exist Ansible only registers exists and does not register isdir
  - fail: msg="Directory {{ controlnode_git_staging_dir }} does not exist"
    when: not git_staging_dir_stat.stat.exists

  - name: check for presence of local misc files directory
    local_action: stat path={{ controlnode_files_dir }}/{{ chef_bcpc_version }}
    register: files_build_resources_dir_stat
    become: no
    run_once: true

  - fail: msg="Directory {{ controlnode_files_dir }}/{{ chef_bcpc_version }} does not exist"
    when: not files_build_resources_dir_stat.stat.exists

  - name: check for presence of local misc files directory with prebuilt binaries (versioned)
    local_action: stat path={{ controlnode_files_dir }}/{{ chef_bcpc_version }}-prebuilt
    register: files_prebuilt_dir_stat
    become: no
    run_once: true
    when: use_prebuilt_binaries

  - fail: msg="Directory {{ controlnode_files_dir }}/{{ chef_bcpc_version }}-prebuilt does not exist"
    when: use_prebuilt_binaries and not files_prebuilt_dir_stat.stat.exists

  - name: check for presence of local apt mirror directory
    local_action: stat path={{ controlnode_apt_mirror_dir }}
    register: apt_mirror_dir_stat
    become: no
    run_once: true

  - fail: msg="Directory {{ controlnode_apt_mirror_dir }} does not exist"
    when: not apt_mirror_dir_stat.stat.exists

  - name: check for presence of chef-bcpc ZIP file
    local_action: stat path={{ controlnode_git_staging_dir }}/chef-bcpc-{{ chef_bcpc_version }}.zip
    register: chef_bcpc_stat
    become: no
    run_once: true
    when: chef_bcpc_deploy_from_dir is not defined

  - fail: msg="chef-bcpc source ZIP does not exist"
    when: chef_bcpc_deploy_from_dir is not defined and not chef_bcpc_stat.stat.exists

  - name: check for presence of chef-bcpc deploy directory
    local_action: stat path={{ chef_bcpc_deploy_from_dir }}
    register: chef_bcpc_dir_stat
    become: no
    run_once: true
    when: chef_bcpc_deploy_from_dir is defined

  - fail: msg="chef-bcpc source directory does not exist"
    when: chef_bcpc_deploy_from_dir is defined and not chef_bcpc_dir_stat.stat.exists

  - name: check for presence of chef-bcpc-prop ZIP file
    local_action: stat path={{ controlnode_git_staging_dir }}/chef-bcpc-prop-{{ chef_bcpc_prop_version }}.zip
    register: chef_bcpc_prop_zip_stat
    become: no
    run_once: true
    when: chef_bcpc_prop_version is defined

  - fail: msg="Source code ZIP of chef-bcpc-prop does not exist"
    when: chef_bcpc_prop_version is defined and not chef_bcpc_prop_zip_stat.stat.exists

# CURRENTLY EXCLUDED BECAUSE ANSIBLE DOES NOT ALLOW REGISTERING VARIABLES WITH A NAME GENERATED BY JINJA
# TODO: FIGURE OUT HOW TO MAKE THIS WORK
#  - name: check for presence of additional internal cookbooks
#    local_action: stat path={{ controlnode_git_staging_dir }}/{{ item.cookbook }}-{{ item.version }}.zip
#    with_items: "{{ internal_cookbooks }}"
#    register: "{{ item.cookbook | regex_replace('[^a-zA-Z0-9]', '_') }}_zip_stat"
#    become: no
#    run_once: true
#
#  - fail: msg="Source code ZIP of {{ item.cookbook }} does not exist"
#    with_items: "{{ internal_cookbooks }}"
#    when: not {{ item.cookbook | regex_replace('[^a-zA-Z0-9]', '_') }}_zip_stat.stat.exists
